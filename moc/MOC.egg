-----------------------------------------------------
-- MC and MOC grammars                             --
-----------------------------------------------------
--options
option auto = true;
option version = 0.0.1;
option k = 2;

-- the source file
inh source : MOCSourceFile for PROGRAM;
-- the target machine for code generation
inh machine : IMachine for
         ENTITIES, FUNCTION, INST, BLOC, INSTS, ELSE,
         FUNC_PARAMETERS, FUNC_PARAMETER, FUNC_PARAMETERSX, ARGS,ARGSX,
         E, AFFX, A, AX, R, RX, T, TX, F
-- TODO:MOC:
--       ,IMPLEMENTATION, METHODES, METHODE, ATTRIBUTS,
--       MFUNC_PARAMETER, MFUNC_PARAMETERS,MARG, MARGS
;

-- these attributes allow to get ASM inline
syn code_asm : STRING for ASM;

-- the current symbols table
inh tds_asm : TDS for ASM;

--terminals
space separator    is "[\r\n\t ]+";
comment comm       is "\/\/[^\n]*\n";
comment ml_comm    is "\/\*([^\*]|(\*+[^\*\-]))*\*+\/";
sugar opar         is "\(";
sugar cpar         is "\)";
sugar occbra       is "\{";
sugar ccbra        is "\}";
sugar comma        is ",";
sugar semicolumn   is "\;";
sugar affect       is "=";
sugar if           is "if";
sugar else         is "else";
sugar void         is "void";
sugar asm          is "asm";
sugar int          is "int";
sugar char         is "char";
sugar return       is "return";
sugar null         is "NULL";
sugar nil          is "nil";
sugar inf          is "\<";
sugar infeq        is "\<=";
sugar sup          is "\>";
sugar supeq        is "\>=";
sugar eq           is "==";
sugar neq          is "\!=";
sugar plus         is "\+";
sugar minus        is "\-";
sugar or           is "\|\|";
sugar and          is "\&\&";
sugar mult         is "\*";
sugar div          is "\/";
sugar mod          is "\%";
sugar not          is "\!";

-- TODO:MOC:
--sugar colon      is "\:";
--sugar osbra      is "\[";
--sugar csbra      is "\]";
--sugar id         is "id";
--sugar class      is "@class";
--sugar end        is "@end";
--sugar self       is "self";
--sugar bool       is "BOOL";
--sugar super      is "super";
--sugar yes        is "YES";
--sugar no         is "NO";

term integer       is "[0-9]+";
term character     is "\'[^\']\'";
term string        is "\"[^\"]*\"";
term ident         is "[a-z][_0-9A-Za-z]*";

-- TODO:MOC:
--term classident  is "[A-Z][_0-9A-Za-z]*";  -- nom de class
--term stringo     is "@\"[^\"]*\"";         -- string MOC

-- for inline assembly
compil ASM;

--production rules
PROGRAM -> #init ENTITIES #gen;
global
   machine : IMachine; -- target machine (chosen with -m at startup)
#init {
    do
        machine := PROGRAM^source.getMachine();
        if machine = null then
            error(NO_MACH, PROGRAM^source.getMachName());
        else
            ENTITIES^machine := machine;
        end
    end
}
-- write the code in a file
#gen {
    do
        machine.writeCode(PROGRAM^source.getFileName(),"; no code\n");
    end
}

ENTITIES -> ;
ENTITIES -> asm #tds ASM ENTITIES #gen;
#tds {
    do
        -- Replace null with the current symbols table so that the ASM
        -- code can access MC or MOC variables
        ASM^tds_asm := null;
    end
}
#gen {
    do
        -- ASM^code_asm contains the inline ASM
    end
}

ENTITIES -> FUNCTION ENTITIES;

--fonctions
FUNCTION -> TYPE ident  opar FUNC_PARAMETERS cpar BLOC;
-- paramÃ¨tres de fonctions
FUNC_PARAMETERS -> ;
FUNC_PARAMETERS -> FUNC_PARAMETER FUNC_PARAMETERSX;
FUNC_PARAMETERSX -> ;
FUNC_PARAMETERSX -> comma FUNC_PARAMETER FUNC_PARAMETERSX;
FUNC_PARAMETER -> TYPE ident;

-- base types and pointers
TYPE -> STYPE  REFS;
REFS -> ;
REFS -> mult REFS;
-- types de base
STYPE-> void;
STYPE-> int;
STYPE-> char;

-- method body and instructions blocks
BLOC -> occbra INSTS ccbra;
-- instructions
INSTS -> ;
INSTS -> INST INSTS;

-- local variable declaration with or without initialisation
INST -> TYPE ident AFFX semicolumn;
-- expression instruction (affectation and procedure call)
INST -> E semicolumn;
-- instruction block
INST -> BLOC;
-- conditional
INST -> if opar E cpar BLOC ELSE;
ELSE -> else BLOC;
ELSE -> ;
-- function return
INST -> return E semicolumn;

-- inline asm
INST -> asm  #tds ASM #gen;
#tds {
    do
        -- to replace by the current symbols table so that inline
        -- assembly can access variables
        ASM^tds_asm := null;
    end
}
#gen {
    do
        -- ASM^code_asm contains the inline assembly in which variable
        -- names have been replaced by their addresses
    end
}

-- expressions
-----------------------------------------------------------------------
-- E = expression (including affectation)
-- A = expression figuring in an affectation
-- R = expression figuring in a relational expression
-- T = expression figuring in an additive expression (TERME)
-- F = expression figuring in a multiplicative expression (FACTEUR)
-----------------------------------------------------------------------
E -> A  AFFX;
-- affectation
AFFX -> affect  A;
AFFX -> ;
-- relation
A -> R AX;
AX -> OPREL R;
AX -> ;
-- relationnal operators
OPREL -> inf;
OPREL -> sup;
OPREL -> infeq;
OPREL -> supeq;
OPREL -> eq;
OPREL -> neq;
R -> T  RX;
-- additions ...
RX -> OPADD  T RX;
RX -> ;
-- additive operators
OPADD -> plus;
OPADD -> minus;
OPADD -> or;
-- multiplication, ...
T -> F TX;
TX -> OPMUL F TX;
TX -> ;
-- multiplicative operators
OPMUL -> mult;
OPMUL -> div;
OPMUL -> mod;
OPMUL -> and;
-- base expressions
-- integer constant
F -> integer;
-- string constant
F -> string;
-- character constant
F -> character;
-- unary expression
F -> OPUN  F;
-- unary operators
OPUN -> plus;
OPUN -> minus;
OPUN -> not;
-- NULL pointer
F -> null;
-- parenthesised expression
F -> opar E cpar;
F -> opar TYPE cpar  F;
-- subprogram call
F -> ident opar ARGS cpar;
F -> ident;
---- acces zone pointee
F -> mult F;
-- subprogram call arguments
ARGS -> ;
ARGS -> E ARGSX;
ARGSX -> ;
ARGSX -> comma  E ARGSX;

-- TODO:MOC:
--ENTITIES -> IMPLEMENTATION ENTITIES;
---- class definition
--IMPLEMENTATION -> class classident SUPER occbra ATTRIBUTS ccbra METHODES end;
---- superclass
--SUPER -> ;
--SUPER -> colon classident;
----attributes
--ATTRIBUTS -> ;
--ATTRIBUTS -> TYPE ident semicolumn ATTRIBUTS;
-- -- methods
--METHODES -> ;
--METHODES -> METHODE  METHODES;
--METHODE -> QUAL PTYPE   MFUNC_PARAMETERS BLOC;
-- --method or attribute qualifier: + = class, - = instance
--QUAL -> plus;
--QUAL -> minus;
-- --type class
--STYPE-> classident;
-- -- type BOOL
--STYPE-> bool;
-- -- type "any"
--TYPE -> id;
---- method return type between parens
--PTYPE-> opar TYPE cpar;
---- method parameters
--MFUNC_PARAMETERS -> ;
--MFUNC_PARAMETERS -> MFUNC_PARAMETER MFUNC_PARAMETERS;
-- -- selector without parameters
--MFUNC_PARAMETER -> ident;
-- -- selector  + parameter type + parameter name
--MFUNC_PARAMETER -> ident colon  PTYPE ident;
---- object nil
--F -> nil;
---- 'YES' constant
--F -> yes;
---- 'NO' constant
--F -> no;
-- -- string MOC (starts with @)
--F -> stringo;
--  --self = Java "this"
--F -> self;
--F -> super;
-- -- method call
--F -> osbra F MARGS csbra;
---- for class method call
--F -> osbra classident MARGS csbra;
---- method call arguments
--MARGS -> ;
--MARGS -> MARG MARGS;
-- -- selector + arg
--MARG -> ident colon  E;
-- -- selector without arg
--MARG -> ident;
---- --end of MOC extension
end
