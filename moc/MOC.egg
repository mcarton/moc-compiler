-----------------------------------------------------
-- Grammaires de MC and MOC                         --
-----------------------------------------------------
--options
option auto = true;
option version = 0.0.1;
option k = 2;

-- le fichier source
inh source : MOCSourceFile for PROGRAM;
-- la machine cible pour la generation de code
inh machine : IMachine for 
         ENTITIES, FUNCTION, INST, BLOC, INSTS, ELSE,
         FUNC_PARAMETERS, FUNC_PARAMETER, FUNC_PARAMETERSX, ARGS,ARGSX, 
         E, AFFX, A, AX, R, RX, T, TX, F
-- TODO:MOC:
--       ,IMPLEMENTATION, METHODES, METHODE, ATTRIBUTS,
--       MFUNC_PARAMETER, MFUNC_PARAMETERS,MARG, MARGS
;

-- ces attributs permandtent de recuperer les instructions du code ASM inline
syn code_asm : STRING for ASM;

-- la TDS courante
inh tds_asm : TDS for ASM;

--terminals
space separator    is "[\r\n\t ]+";
comment comm       is "\/\/[^\n]*\n";
comment ml_comm    is "\/\*([^\*]|(\*+[^\*\-]))*\*+\/";
sugar opar         is "\(";
sugar cpar         is "\)";
sugar occbra       is "\{";
sugar ccbra        is "\}";
sugar comma        is ",";
sugar semicolumn   is "\;";
sugar affect       is "=";
sugar if           is "if";
sugar else         is "else";
sugar void         is "void";
sugar asm          is "asm";
sugar int          is "int";
sugar char         is "char";
sugar return       is "return";
sugar null         is "NULL";
sugar nil          is "nil";
sugar inf          is "\<";
sugar infeq        is "\<=";
sugar sup          is "\>";
sugar supeq        is "\>=";
sugar eq           is "==";
sugar neq          is "\!=";
sugar plus         is "\+";
sugar minus        is "\-";
sugar or           is "\|\|";
sugar and          is "\&\&";
sugar mult         is "\*";
sugar div          is "\/";
sugar mod          is "\%";
sugar not          is "\!";

-- TODO:MOC:
--sugar colon      is "\:";
--sugar osbra      is "\[";
--sugar csbra      is "\]";
--sugar id         is "id";
--sugar class      is "@class";
--sugar end        is "@end";
--sugar self       is "self";
--sugar bool       is "BOOL";
--sugar super      is "super";
--sugar yes        is "YES";
--sugar no         is "NO";

term integer       is "[0-9]+";
term character     is "\'[^\']\'";
term string        is "\"[^\"]*\"";
term ident         is "[a-z][_0-9A-Za-z]*";

-- TODO:MOC:
--term classident  is "[A-Z][_0-9A-Za-z]*";  -- nom de class
--term stringo     is "@\"[^\"]*\"";         -- string MOC

-- pour les instructions en assembleur 'inline'
compil ASM;

--production rules
PROGRAM -> #init ENTITIES #gen;
global
   machine : IMachine; -- machine cible (choisie par l'option -m au lancement)
#init {
    do
        machine := PROGRAM^source.getMachine();
        if machine = null then
            error(NO_MACH, PROGRAM^source.getMachName());
        else
            ENTITIES^machine := machine;
        end
    end
}
-- ecrit le code dans un fichier
#gen {
    do
        machine.writeCode(PROGRAM^source.getFileName(),"; no code\n");
    end
}

ENTITIES -> ;
ENTITIES -> asm #tds ASM ENTITIES #gen;
#tds {
    do
        -- Remplacer 'null' par la table courante pour que
        -- le code  ASM puisse acceder aux variables de MC ou MOC
        ASM^tds_asm := null;
    end
}
#gen {
    do
        -- ASM^code_asm contient le code ASM inline;
    end
}

ENTITIES -> FUNCTION ENTITIES;

--fonctions
FUNCTION -> TYPE ident  opar FUNC_PARAMETERS cpar BLOC;
-- paramÃ¨tres de fonctions
FUNC_PARAMETERS -> ;
FUNC_PARAMETERS -> FUNC_PARAMETER FUNC_PARAMETERSX;
FUNC_PARAMETERSX -> ;
FUNC_PARAMETERSX -> comma FUNC_PARAMETER FUNC_PARAMETERSX;
FUNC_PARAMETER -> TYPE ident;

-- les types (de base et pointeurs)
TYPE -> STYPE  REFS;
REFS -> ;
REFS -> mult REFS;
-- types de base
STYPE-> void;
STYPE-> int;
STYPE-> char;

-- corps de methode and bloc d'instructions
BLOC -> occbra INSTS ccbra;
-- instructions
INSTS -> ;
INSTS -> INST INSTS;

-- declaration de variable locale avec ou sans init
INST -> TYPE ident AFFX semicolumn;
-- instruction expression (affectation et appel de procedure)
INST -> E semicolumn;
-- bloc d'instructions
INST -> BLOC;
-- conditionnelle
INST -> if opar E cpar BLOC ELSE;
ELSE -> else BLOC;
ELSE -> ;
-- retour de fonction
INST -> return E semicolumn;

-- inline asm
INST -> asm  #tds ASM #gen;
#tds {
    do
        -- A remplacer par la table courante pour que
        -- l'assembleur puisse acceder aux varaibles
        ASM^tds_asm := null;
    end
}
#gen {
    do
        -- ASM^code_asm contient le code assembleur inline
        -- dans lequel les noms de variables ont ande remplaces
        -- par leurs adresses.
    end
}

-- les expressions
-----------------------------------------------------------------------
-- E = expression (y compris l'affectation)
-- A = expression figurant dans une affectation
-- R = expression figurant dans une expreifon relationnelle
-- T = expression figurant dans une expression additive (TERME)
-- F = expression figurant dans une expression multiplicative (FACTEUR)
-----------------------------------------------------------------------
E -> A  AFFX;
-- affectation
AFFX -> affect  A;
AFFX -> ;
-- relation
A -> R AX;
AX -> OPREL R;
AX -> ;
-- operateurs relationnels
OPREL -> inf;
OPREL -> sup;
OPREL -> infeq;
OPREL -> supeq;
OPREL -> eq;
OPREL -> neq;
R -> T  RX;
-- additions ...
RX -> OPADD  T RX;
RX -> ;
-- operateurs additifs
OPADD -> plus;
OPADD -> minus;
OPADD -> or;
-- multiplication, ...
T -> F TX;
TX -> OPMUL F TX;
TX -> ;
-- operateurs multiplicatifs
OPMUL -> mult;
OPMUL -> div;
OPMUL -> mod;
OPMUL -> and;
-- expressions de base
-- Constante integere
F -> integer;
-- Constante string
F -> string;
-- Constante character
F -> character;
-- expression unaire
F -> OPUN  F;
-- operateurs unaires
OPUN -> plus;
OPUN -> minus;
OPUN -> not;
-- pointeur NULL
F -> null;
-- expression parenthesee
F -> opar E cpar;
F -> opar TYPE cpar  F;
-- appel de sors-programme
F -> ident opar ARGS cpar;
F -> ident;
---- acces zone pointee
F -> mult F;
-- arguments appel de sors-programme
ARGS -> ;
ARGS -> E ARGSX;
ARGSX -> ;
ARGSX -> comma  E ARGSX;

-- TODO:MOC:
--ENTITIES -> IMPLEMENTATION ENTITIES;
---- deendition d'une class
--IMPLEMENTATION -> class classident SUPER occbra ATTRIBUTS ccbra METHODES end;
---- surclass
--SUPER -> ;
--SUPER -> colon classident;
----attributs
--ATTRIBUTS -> ;
--ATTRIBUTS -> TYPE ident semicolumn ATTRIBUTS;
-- -- methodes
--METHODES -> ;
--METHODES -> METHODE  METHODES;
--METHODE -> QUAL PTYPE   MFUNC_PARAMETERS BLOC;
-- --qualificateur attribut or methode :  + = de class, - = d'instance
--QUAL -> plus;
--QUAL -> minus;
-- --type class
--STYPE-> classident;
-- -- type BOOL
--STYPE-> bool;
-- -- type "any"
--TYPE -> id;
---- type argument (or return) de methode entre parentheses
--PTYPE-> opar TYPE cpar;
---- paramandres de methodes
--MFUNC_PARAMETERS -> ;
--MFUNC_PARAMETERS -> MFUNC_PARAMETER MFUNC_PARAMETERS;
-- -- selecteur sans paramandre
--MFUNC_PARAMETER -> ident;
-- -- selecteur  + type paramandre + nom paramandre
--MFUNC_PARAMETER -> ident colon  PTYPE ident;
---- object nil
--F -> nil;
----Constante 'YES'
--F -> yes;
---- Constante 'NO'
--F -> no;
-- -- string MOC (commence par @)
--F -> stringo;
--  --self = this de Java
--F -> self;
--F -> super;
-- -- Appel de methode
--F -> osbra F MARGS csbra;
---- pour appel methode de class
--F -> osbra classident MARGS csbra;
---- arguments appel de methode
--MARGS -> ;
--MARGS -> MARG MARGS;
-- -- selecteur + arg
--MARG -> ident colon  E;
-- -- selecteur sans arg
--MARG -> ident;
---- --end de MOC extenifon
end

