// inline assembly outside functions
asm {
    CALL (LB) _main   ; call to the entry point of the program
    HALT              ; stop the machine
}

// inline assembly in a function
Int* malloc(Int size){
    asm {
        LOAD %size         ; access parameter size
        SUBR Malloc        ; allocation
        RETURN (1) 1
    }
}

// inline assembly in a function
void log(Char* message, Int value){
    Int x = 12;
    asm {
        LOAD %message        ; access the first parameter
        SUBR Sout            ; print message
        LOAD %value          ; access the second parameter
        LOADL 1
        SUBR IAdd
        STORE %x             ; write value+1 into x
        LOAD %x              ; access variable x
        SUBR IOUT            ; print x
        SUBR LN
        RETURN (2) 0
    }
}

// function showing pointer manipulation
Int foo(Int n){
    // declare without initialising
    Int xxx;
    xxx = 100;
    // declare and initialise
    Int a = n+999;
    // declare a pointer
    Int* m = malloc(1);
    a = *m +666;
    // declare a pointer of pointer
    Int ** k = new(Int*);
    *k = m;
    ** k = 12;
    Int b = **k + 9999;
    // cast
    m = (Int*)malloc(10);
    return *m;
}

// function returning a pointer
Int* ref(Int x){
    Int* p = malloc(x);
    return p;
}

// function showing arithmetic expressions
Int bar(Int a, Int b){
    Int u = 301;
    Int v = 401;
    Int result;
    result = foo(33*a - b > (-55*u/22%11/v));
    return result;
}

// entry point of the program
Int main(){
    log("Hello, world ! ", bar(98,99));
    Char c = 'a';
    Int y = 999;
    // conditional instruction
    if (y == 0){
        log("then",y);}
    else {
        log("else", y);
    }
    return y;
}

